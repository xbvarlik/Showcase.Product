datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Shop {
    id String @id @db.Uuid @default(uuid())
    name String @db.VarChar(255)
    description String? @db.Text
    address String @db.VarChar(255)

    products Product[]

    createdAt DateTime @default(now())
    changedAt DateTime @updatedAt @default(now())
    createdBy String? @db.Uuid 
    changedBy String? @db.Uuid 
    isDeleted Boolean @default(false)
}

model ProductUpperCategory {
    id Int @id @default(autoincrement())
    name String @db.VarChar(255)

    productCategories ProductCategory[]

    createdAt DateTime @default(now())
    changedAt DateTime @updatedAt @default(now())
    createdBy String? @db.Uuid 
    changedBy String? @db.Uuid 
    isDeleted Boolean @default(false)
}

model ProductCategory {
    id Int @id @default(autoincrement())
    name String @db.VarChar(255)

    productUpperCategoryId Int
    productUpperCategory ProductUpperCategory @relation(fields: [productUpperCategoryId], references: [id])

    products Product[]

    createdAt DateTime @default(now())
    changedAt DateTime @updatedAt @default(now())
    createdBy String? @db.Uuid 
    changedBy String? @db.Uuid 
    isDeleted Boolean @default(false)

    @@index([productUpperCategoryId])
}

model Product {
    id String @id @db.Uuid @default(uuid())
    name String @db.VarChar(255)
    description String? @db.Text
    price Decimal @db.Decimal(18, 2)

    productCategoryId Int
    productCategory ProductCategory? @relation(fields: [productCategoryId], references: [id])
    shopId String @db.Uuid
    shop Shop @relation(fields: [shopId], references: [id])

    likedListItems LikedListItem[]

    createdAt DateTime @default(now())
    changedAt DateTime @updatedAt @default(now())
    createdBy String? @db.Uuid 
    changedBy String? @db.Uuid 
    isDeleted Boolean @default(false)

    @@index([shopId])
    @@index([productCategoryId])
}

model LikedList {
  id String @id @db.Uuid @default(uuid())
  title String @db.VarChar(255)
  userId String @db.Uuid
  isPublic Boolean 

  likedListItems LikedListItem[]

  createdAt DateTime @default(now())
  changedAt DateTime @updatedAt @default(now())
  createdBy String? @db.Uuid 
  changedBy String? @db.Uuid 
  isDeleted Boolean @default(false)
}

model LikedListItem {  
  likedListId String @db.Uuid
  likedList LikedList @relation(fields: [likedListId], references: [id])
  productId String @db.Uuid
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  changedAt DateTime @updatedAt @default(now())
  createdBy String? @db.Uuid 
  changedBy String? @db.Uuid 
  isDeleted Boolean @default(false)

  @@id([productId, likedListId])
  @@unique([productId, likedListId])
  @@index([productId])
  @@index([likedListId])
  
}