"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_QBK5XTJE_exports = {};
__export(chunk_QBK5XTJE_exports, {
  init_replaceOrAddDatasource: () => init_replaceOrAddDatasource,
  replaceOrAddDatasource: () => replaceOrAddDatasource
});
module.exports = __toCommonJS(chunk_QBK5XTJE_exports);
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var import_internals = require("@prisma/internals");
function replaceOrAddDatasource(newDatasource, files) {
  let replaced = false;
  const result = files.map(([path, content]) => {
    const replaceResult = replaceDatasourceSingle(newDatasource, content);
    if (replaceResult.replaced) {
      replaced = true;
    }
    return [path, replaceResult.content];
  });
  if (!replaced) {
    appendToFirstFile(newDatasource, result);
  }
  return result;
}
function appendToFirstFile(newDatasource, files) {
  const firstFile = files[0];
  (0, import_internals.assertAlways)(firstFile, "There always should be at least on file in the schema");
  firstFile[1] = `${newDatasource}
${firstFile[1]}`;
}
function replaceDatasourceSingle(newDatasource, content) {
  const lines = content.split(/\r\n|\r|\n/g);
  const existingDatasource = findDatasource(lines);
  if (!existingDatasource) {
    return { replaced: false, content };
  }
  lines.splice(existingDatasource.startLine, existingDatasource.endLine - existingDatasource.startLine + 1);
  const noDatasource = lines.join("\n").trim();
  return { replaced: true, content: `${newDatasource}

${noDatasource}` };
}
function findDatasource(lines) {
  if (lines.length <= 2) {
    return void 0;
  }
  const startLine = lines.findIndex((line) => {
    const lineTrimmed = line.trim();
    return lineTrimmed.startsWith("datasource") && lineTrimmed.endsWith("{");
  });
  if (startLine === -1) {
    return void 0;
  }
  let endLine = -1;
  for (let index = startLine; index < lines.length; index++) {
    const lineTrimmed = lines[index].trim();
    if (lineTrimmed.endsWith("}") && !lineTrimmed.startsWith("//")) {
      endLine = index;
      break;
    }
  }
  if (endLine === -1) {
    return void 0;
  }
  return { startLine, endLine };
}
var init_replaceOrAddDatasource = (0, import_chunk_WWAWV7DQ.__esm)({
  "src/utils/replaceOrAddDatasource.ts"() {
  }
});
