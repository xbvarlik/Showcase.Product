"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_XVL5RF2T_exports = {};
__export(chunk_XVL5RF2T_exports, {
  MigrateReset: () => MigrateReset,
  init_MigrateReset: () => init_MigrateReset
});
module.exports = __toCommonJS(chunk_XVL5RF2T_exports);
var import_chunk_EFPE3Q7J = require("./chunk-EFPE3Q7J.js");
var import_chunk_WOOPRG54 = require("./chunk-WOOPRG54.js");
var import_chunk_MWEO3VUS = require("./chunk-MWEO3VUS.js");
var import_chunk_U374EXYQ = require("./chunk-U374EXYQ.js");
var import_chunk_EYA6AFSF = require("./chunk-EYA6AFSF.js");
var import_chunk_Q7ACZDDT = require("./chunk-Q7ACZDDT.js");
var import_chunk_KEBB7UIB = require("./chunk-KEBB7UIB.js");
var import_chunk_6TE2RIPN = require("./chunk-6TE2RIPN.js");
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var import_internals = require("@prisma/internals");
var import_prompts = __toESM(require("prompts"));
var _MigrateReset, MigrateReset;
var init_MigrateReset = (0, import_chunk_WWAWV7DQ.__esm)({
  "src/commands/MigrateReset.ts"() {
    (0, import_chunk_6TE2RIPN.init_colors)();
    (0, import_chunk_MWEO3VUS.init_Migrate)();
    (0, import_chunk_KEBB7UIB.init_ensureDatabaseExists)();
    (0, import_chunk_U374EXYQ.init_errors)();
    (0, import_chunk_EYA6AFSF.init_getSchemaPathAndPrint)();
    (0, import_chunk_Q7ACZDDT.init_printDatasource)();
    (0, import_chunk_WOOPRG54.init_printFiles)();
    (0, import_chunk_EFPE3Q7J.init_seed)();
    _MigrateReset = class _MigrateReset2 {
      static new() {
        return new _MigrateReset2();
      }
      async parse(argv) {
        const args = (0, import_internals.arg)(argv, {
          "--help": Boolean,
          "-h": "--help",
          "--force": Boolean,
          "-f": "--force",
          "--skip-generate": Boolean,
          "--skip-seed": Boolean,
          "--schema": String,
          "--telemetry-information": String
        });
        if ((0, import_internals.isError)(args)) {
          return this.help(args.message);
        }
        await (0, import_internals.checkUnsupportedDataProxy)("migrate reset", args, true);
        if (args["--help"]) {
          return this.help();
        }
        await (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true });
        const { schemaPath } = await (0, import_chunk_EYA6AFSF.getSchemaPathAndPrint)(args["--schema"]);
        (0, import_chunk_Q7ACZDDT.printDatasource)({ datasourceInfo: await (0, import_chunk_KEBB7UIB.getDatasourceInfo)({ schemaPath }) });
        const wasDbCreated = await (0, import_chunk_KEBB7UIB.ensureDatabaseExists)("create", schemaPath);
        if (wasDbCreated) {
          process.stdout.write("\n" + wasDbCreated + "\n");
        }
        process.stdout.write("\n");
        if (!args["--force"]) {
          if (!(0, import_internals.canPrompt)()) {
            throw new import_chunk_U374EXYQ.MigrateResetEnvNonInteractiveError();
          }
          const confirmation = await (0, import_prompts.default)({
            type: "confirm",
            name: "value",
            message: `Are you sure you want to reset your database? ${(0, import_chunk_6TE2RIPN.red)("All data will be lost")}.`
          });
          process.stdout.write("\n");
          if (!confirmation.value) {
            process.stdout.write("Reset cancelled.\n");
            process.exit(130);
          }
        }
        const migrate = new import_chunk_MWEO3VUS.Migrate(schemaPath);
        let migrationIds;
        try {
          await migrate.reset();
          const { appliedMigrationNames } = await migrate.applyMigrations();
          migrationIds = appliedMigrationNames;
        } finally {
          migrate.stop();
        }
        if (migrationIds.length === 0) {
          process.stdout.write(`${(0, import_chunk_6TE2RIPN.green)("Database reset successful\n")}
`);
        } else {
          process.stdout.write("\n");
          process.stdout.write(
            `${(0, import_chunk_6TE2RIPN.green)("Database reset successful")}

The following migration(s) have been applied:

${(0, import_chunk_WOOPRG54.printFilesFromMigrationIds)("migrations", migrationIds, {
              "migration.sql": ""
            })}
`
          );
        }
        if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
          await migrate.tryToRunGenerate();
        }
        if (!process.env.PRISMA_MIGRATE_SKIP_SEED && !args["--skip-seed"]) {
          const seedCommandFromPkgJson = await (0, import_chunk_EFPE3Q7J.getSeedCommandFromPackageJson)(process.cwd());
          if (seedCommandFromPkgJson) {
            process.stdout.write("\n");
            const successfulSeeding = await (0, import_chunk_EFPE3Q7J.executeSeedCommand)({ commandFromConfig: seedCommandFromPkgJson });
            if (successfulSeeding) {
              process.stdout.write(`
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.
`);
            } else {
              process.exit(1);
            }
          } else {
            const { schemaPath: schemaPath2 } = await (0, import_internals.getSchemaWithPath)(args["--schema"]);
            await (0, import_chunk_EFPE3Q7J.verifySeedConfigAndReturnMessage)(schemaPath2);
          }
        }
        return ``;
      }
      help(error) {
        if (error) {
          return new import_internals.HelpError(`
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.red)(`!`))} ${error}
${_MigrateReset2.help}`);
        }
        return _MigrateReset2.help;
      }
    };
    _MigrateReset.help = (0, import_internals.format)(`
Reset your database and apply all migrations, all data will be lost

${(0, import_chunk_6TE2RIPN.bold)("Usage")}

  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate reset [options]

${(0, import_chunk_6TE2RIPN.bold)("Options")}

       -h, --help   Display this help message
         --schema   Custom path to your Prisma schema
  --skip-generate   Skip triggering generators (e.g. Prisma Client)
      --skip-seed   Skip triggering seed
      -f, --force   Skip the confirmation prompt

${(0, import_chunk_6TE2RIPN.bold)("Examples")}

  Reset your database and apply all migrations, all data will be lost
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate reset

  Specify a schema
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate reset --schema=./schema.prisma 

  Use --force to skip the confirmation prompt
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate reset --force
  `);
    MigrateReset = _MigrateReset;
  }
});
