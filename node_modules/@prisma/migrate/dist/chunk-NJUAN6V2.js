"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_NJUAN6V2_exports = {};
__export(chunk_NJUAN6V2_exports, {
  DbCommand: () => DbCommand,
  init_DbCommand: () => init_DbCommand
});
module.exports = __toCommonJS(chunk_NJUAN6V2_exports);
var import_chunk_6TE2RIPN = require("./chunk-6TE2RIPN.js");
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var import_internals = require("@prisma/internals");
var _DbCommand, DbCommand;
var init_DbCommand = (0, import_chunk_WWAWV7DQ.__esm)({
  "src/commands/DbCommand.ts"() {
    (0, import_chunk_6TE2RIPN.init_colors)();
    _DbCommand = class _DbCommand2 {
      constructor(cmds) {
        this.cmds = cmds;
      }
      static new(cmds) {
        return new _DbCommand2(cmds);
      }
      /* eslint-disable-next-line @typescript-eslint/require-await */
      async parse(argv) {
        const args = (0, import_internals.arg)(argv, {
          "--help": Boolean,
          "-h": "--help",
          "--preview-feature": Boolean,
          "--telemetry-information": String
        });
        if ((0, import_internals.isError)(args)) {
          return this.help(args.message);
        }
        if (args._.length === 0 || args["--help"]) {
          return this.help();
        }
        const cmd = this.cmds[args._[0]];
        if (cmd) {
          const argsForCmd = args["--preview-feature"] ? [...args._.slice(1), `--preview-feature`] : args._.slice(1);
          return cmd.parse(argsForCmd);
        }
        return (0, import_internals.unknownCommand)(_DbCommand2.help, args._[0]);
      }
      help(error) {
        if (error) {
          return new import_internals.HelpError(`
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.red)(`!`))} ${error}
${_DbCommand2.help}`);
        }
        return _DbCommand2.help;
      }
    };
    _DbCommand.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : "\u{1F3CB}\uFE0F  "}Manage your database schema and lifecycle during development.

${(0, import_chunk_6TE2RIPN.bold)("Usage")}

  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma db [command] [options]

${(0, import_chunk_6TE2RIPN.bold)("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${(0, import_chunk_6TE2RIPN.bold)("Commands")}
     pull   Pull the state from the database to the Prisma schema using introspection
     push   Push the state from Prisma schema to the database during prototyping
     seed   Seed your database
  execute   Execute native commands to your database

${(0, import_chunk_6TE2RIPN.bold)("Examples")}

  Run \`prisma db pull\`
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma db pull

  Run \`prisma db push\`
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma db push

  Run \`prisma db seed\`
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma db seed

  Run \`prisma db execute\`
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma db execute
`);
    DbCommand = _DbCommand;
  }
});
