"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_LLGEQ76N_exports = {};
__export(chunk_LLGEQ76N_exports, {
  MigrateDev: () => MigrateDev,
  init_MigrateDev: () => init_MigrateDev
});
module.exports = __toCommonJS(chunk_LLGEQ76N_exports);
var import_chunk_IFCV5MY4 = require("./chunk-IFCV5MY4.js");
var import_chunk_SGCF5OHF = require("./chunk-SGCF5OHF.js");
var import_chunk_EFPE3Q7J = require("./chunk-EFPE3Q7J.js");
var import_chunk_WOOPRG54 = require("./chunk-WOOPRG54.js");
var import_chunk_6QFE3AWR = require("./chunk-6QFE3AWR.js");
var import_chunk_MWEO3VUS = require("./chunk-MWEO3VUS.js");
var import_chunk_U374EXYQ = require("./chunk-U374EXYQ.js");
var import_chunk_EYA6AFSF = require("./chunk-EYA6AFSF.js");
var import_chunk_Q7ACZDDT = require("./chunk-Q7ACZDDT.js");
var import_chunk_KEBB7UIB = require("./chunk-KEBB7UIB.js");
var import_chunk_6TE2RIPN = require("./chunk-6TE2RIPN.js");
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var import_prompts = __toESM(require("prompts"));
var debug, _MigrateDev, MigrateDev;
var init_MigrateDev = (0, import_chunk_WWAWV7DQ.__esm)({
  "src/commands/MigrateDev.ts"() {
    (0, import_chunk_6TE2RIPN.init_colors)();
    (0, import_chunk_MWEO3VUS.init_Migrate)();
    (0, import_chunk_KEBB7UIB.init_ensureDatabaseExists)();
    (0, import_chunk_U374EXYQ.init_errors)();
    (0, import_chunk_EYA6AFSF.init_getSchemaPathAndPrint)();
    (0, import_chunk_SGCF5OHF.init_handleEvaluateDataloss)();
    (0, import_chunk_Q7ACZDDT.init_printDatasource)();
    (0, import_chunk_WOOPRG54.init_printFiles)();
    (0, import_chunk_6QFE3AWR.init_printMigrationId)();
    (0, import_chunk_IFCV5MY4.init_promptForMigrationName)();
    (0, import_chunk_EFPE3Q7J.init_seed)();
    debug = (0, import_debug.default)("prisma:migrate:dev");
    _MigrateDev = class _MigrateDev2 {
      static new() {
        return new _MigrateDev2();
      }
      async parse(argv) {
        const args = (0, import_internals.arg)(argv, {
          "--help": Boolean,
          "-h": "--help",
          "--name": String,
          "-n": "--name",
          // '--force': Boolean,
          // '-f': '--force',
          "--create-only": Boolean,
          "--schema": String,
          "--skip-generate": Boolean,
          "--skip-seed": Boolean,
          "--telemetry-information": String
        });
        if ((0, import_internals.isError)(args)) {
          return this.help(args.message);
        }
        await (0, import_internals.checkUnsupportedDataProxy)("migrate dev", args, true);
        if (args["--help"]) {
          return this.help();
        }
        await (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true });
        const { schemaPath, schemas } = await (0, import_chunk_EYA6AFSF.getSchemaPathAndPrint)(args["--schema"]);
        const datasourceInfo = await (0, import_chunk_KEBB7UIB.getDatasourceInfo)({ schemaPath });
        (0, import_chunk_Q7ACZDDT.printDatasource)({ datasourceInfo });
        process.stdout.write("\n");
        (0, import_internals.validate)({
          schemas
        });
        await (0, import_internals.getConfig)({
          datamodel: schemas,
          ignoreEnvVarErrors: false
        });
        const wasDbCreated = await (0, import_chunk_KEBB7UIB.ensureDatabaseExists)("create", schemaPath);
        if (wasDbCreated) {
          process.stdout.write(wasDbCreated + "\n\n");
        }
        const migrate = new import_chunk_MWEO3VUS.Migrate(schemaPath);
        let devDiagnostic;
        try {
          devDiagnostic = await migrate.devDiagnostic();
          debug({ devDiagnostic: JSON.stringify(devDiagnostic, null, 2) });
        } catch (e) {
          migrate.stop();
          throw e;
        }
        const migrationIdsApplied = [];
        if (devDiagnostic.action.tag === "reset") {
          if (!args["--force"]) {
            if (!(0, import_internals.canPrompt)()) {
              migrate.stop();
              throw new import_chunk_U374EXYQ.MigrateDevEnvNonInteractiveError();
            }
            const confirmedReset = await this.confirmReset({
              datasourceInfo,
              reason: devDiagnostic.action.reason
            });
            process.stdout.write("\n");
            if (!confirmedReset) {
              process.stdout.write("Reset cancelled.\n");
              migrate.stop();
              process.exit(130);
            }
          }
          try {
            await migrate.reset();
          } catch (e) {
            migrate.stop();
            throw e;
          }
        }
        try {
          const { appliedMigrationNames } = await migrate.applyMigrations();
          migrationIdsApplied.push(...appliedMigrationNames);
          if (appliedMigrationNames.length > 0) {
            process.stdout.write(
              `
The following migration(s) have been applied:

${(0, import_chunk_WOOPRG54.printFilesFromMigrationIds)(
                "migrations",
                appliedMigrationNames,
                {
                  "migration.sql": ""
                }
              )}
`
            );
          }
        } catch (e) {
          migrate.stop();
          throw e;
        }
        let evaluateDataLossResult;
        try {
          evaluateDataLossResult = await migrate.evaluateDataLoss();
          debug({ evaluateDataLossResult });
        } catch (e) {
          migrate.stop();
          throw e;
        }
        const unexecutableStepsError = (0, import_chunk_SGCF5OHF.handleUnexecutableSteps)(
          evaluateDataLossResult.unexecutableSteps,
          args["--create-only"]
        );
        if (unexecutableStepsError) {
          migrate.stop();
          throw new Error(unexecutableStepsError);
        }
        if (evaluateDataLossResult.warnings && evaluateDataLossResult.warnings.length > 0) {
          process.stdout.write((0, import_chunk_6TE2RIPN.bold)(`
\u26A0\uFE0F  Warnings for the current datasource:

`));
          for (const warning of evaluateDataLossResult.warnings) {
            process.stdout.write(`  \u2022 ${warning.message}
`);
          }
          process.stdout.write("\n");
          if (!args["--force"]) {
            if (!(0, import_internals.canPrompt)()) {
              migrate.stop();
              throw new import_chunk_U374EXYQ.MigrateDevEnvNonInteractiveError();
            }
            const message = args["--create-only"] ? "Are you sure you want to create this migration?" : "Are you sure you want to create and apply this migration?";
            const confirmation = await (0, import_prompts.default)({
              type: "confirm",
              name: "value",
              message
            });
            if (!confirmation.value) {
              process.stdout.write("Migration cancelled.\n");
              migrate.stop();
              process.exit(130);
            }
          }
        }
        let migrationName = void 0;
        if (evaluateDataLossResult.migrationSteps > 0 || args["--create-only"]) {
          const getMigrationNameResult = await (0, import_chunk_IFCV5MY4.getMigrationName)(args["--name"]);
          if (getMigrationNameResult.userCancelled) {
            process.stdout.write(getMigrationNameResult.userCancelled + "\n");
            migrate.stop();
            process.exit(130);
          } else {
            migrationName = getMigrationNameResult.name;
          }
        }
        let migrationIds;
        try {
          const createMigrationResult = await migrate.createMigration({
            migrationsDirectoryPath: migrate.migrationsDirectoryPath,
            migrationName: migrationName || "",
            draft: args["--create-only"] ? true : false,
            schema: (0, import_internals.toSchemasContainer)((await migrate.getPrismaSchema()).schemas)
          });
          debug({ createMigrationResult });
          if (args["--create-only"]) {
            migrate.stop();
            return `Prisma Migrate created the following migration without applying it ${(0, import_chunk_6QFE3AWR.printMigrationId)(
              createMigrationResult.generatedMigrationName
            )}

You can now edit it and apply it by running ${(0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)("prisma migrate dev"))}.`;
          }
          const { appliedMigrationNames } = await migrate.applyMigrations();
          migrationIds = appliedMigrationNames;
        } finally {
          migrate.stop();
        }
        migrationIdsApplied.length > 0 && process.stdout.write("\n");
        if (migrationIds.length === 0) {
          if (migrationIdsApplied.length > 0) {
            process.stdout.write(`${(0, import_chunk_6TE2RIPN.green)("Your database is now in sync with your schema.")}
`);
          } else {
            process.stdout.write(`Already in sync, no schema change or pending migration was found.
`);
          }
        } else {
          process.stdout.write(
            `
The following migration(s) have been created and applied from new schema changes:

${(0, import_chunk_WOOPRG54.printFilesFromMigrationIds)(
              "migrations",
              migrationIds,
              {
                "migration.sql": ""
              }
            )}

${(0, import_chunk_6TE2RIPN.green)("Your database is now in sync with your schema.")}
`
          );
        }
        if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
          await migrate.tryToRunGenerate();
          process.stdout.write("\n");
        }
        if ((wasDbCreated || devDiagnostic.action.tag === "reset") && !process.env.PRISMA_MIGRATE_SKIP_SEED && !args["--skip-seed"]) {
          try {
            const seedCommandFromPkgJson = await (0, import_chunk_EFPE3Q7J.getSeedCommandFromPackageJson)(process.cwd());
            if (seedCommandFromPkgJson) {
              process.stdout.write("\n");
              const successfulSeeding = await (0, import_chunk_EFPE3Q7J.executeSeedCommand)({ commandFromConfig: seedCommandFromPkgJson });
              if (successfulSeeding) {
                process.stdout.write(`
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.
`);
              } else {
                process.exit(1);
              }
            } else {
              const { schemaPath: schemaPath2 } = await (0, import_internals.getSchemaWithPath)(args["--schema"]);
              await (0, import_chunk_EFPE3Q7J.verifySeedConfigAndReturnMessage)(schemaPath2);
            }
          } catch (e) {
            console.error(e);
          }
        }
        return "";
      }
      async confirmReset({
        datasourceInfo,
        reason
      }) {
        process.stdout.write(reason + "\n");
        let messageFirstLine = "";
        if (["PostgreSQL", "SQL Server"].includes(datasourceInfo.prettyProvider)) {
          if (datasourceInfo.schemas?.length) {
            messageFirstLine = `We need to reset the following schemas: "${datasourceInfo.schemas.join(", ")}"`;
          } else if (datasourceInfo.schema) {
            messageFirstLine = `We need to reset the "${datasourceInfo.schema}" schema`;
          } else {
            messageFirstLine = `We need to reset the database schema`;
          }
        } else {
          messageFirstLine = `We need to reset the ${datasourceInfo.prettyProvider} database "${datasourceInfo.dbName}"`;
        }
        if (datasourceInfo.dbLocation) {
          messageFirstLine += ` at "${datasourceInfo.dbLocation}"`;
        }
        const messageForPrompt = `${messageFirstLine}
Do you want to continue? ${(0, import_chunk_6TE2RIPN.red)("All data will be lost")}.`;
        if (Boolean(import_prompts.default._injected?.length) === true) {
          process.stdout.write(messageForPrompt + "\n");
        }
        const confirmation = await (0, import_prompts.default)({
          type: "confirm",
          name: "value",
          message: messageForPrompt
        });
        return confirmation.value;
      }
      help(error) {
        if (error) {
          return new import_internals.HelpError(`
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.red)(`!`))} ${error}
${_MigrateDev2.help}`);
        }
        return _MigrateDev2.help;
      }
    };
    _MigrateDev.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : "\u{1F3CB}\uFE0F  "}Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
 
${(0, import_chunk_6TE2RIPN.bold)("Usage")}

  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate dev [options]

${(0, import_chunk_6TE2RIPN.bold)("Options")}

       -h, --help   Display this help message
         --schema   Custom path to your Prisma schema
       -n, --name   Name the migration
    --create-only   Create a new migration but do not apply it
                    The migration will be empty if there are no changes in Prisma schema
  --skip-generate   Skip triggering generators (e.g. Prisma Client)
      --skip-seed   Skip triggering seed

${(0, import_chunk_6TE2RIPN.bold)("Examples")}

  Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate dev

  Specify a schema
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate dev --schema=./schema.prisma

  Create a migration without applying it
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate dev --create-only
  `);
    MigrateDev = _MigrateDev;
  }
});
