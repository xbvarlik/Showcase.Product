"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_TKAGMA5K_exports = {};
__export(chunk_TKAGMA5K_exports, {
  CaptureStdout: () => CaptureStdout,
  init_captureStdout: () => init_captureStdout
});
module.exports = __toCommonJS(chunk_TKAGMA5K_exports);
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var CaptureStdout;
var init_captureStdout = (0, import_chunk_WWAWV7DQ.__esm)({
  "src/utils/captureStdout.ts"() {
    CaptureStdout = class {
      constructor() {
        this._capturedText = [];
        this._orig_stdout_write = null;
      }
      /**
       * Starts capturing the writes to process.stdout
       */
      startCapture() {
        this._orig_stdout_write = process.stdout.write;
        process.stdout.write = this._writeCapture.bind(this);
      }
      /**
       * Stops capturing the writes to process.stdout.
       */
      stopCapture() {
        if (this._orig_stdout_write) {
          process.stdout.write = this._orig_stdout_write;
        }
      }
      /**
       * Private method that is used as the replacement write function for process.stdout
       * @param string
       * @private
       */
      _writeCapture(string) {
        this._capturedText.push(string);
      }
      /**
       * Retrieve the text that has been captured since creation or since the last clear call
       * @returns {Array} of Strings
       */
      getCapturedText() {
        return this._capturedText;
      }
      /**
       * Clears all of the captured text
       */
      clearCaptureText() {
        this._capturedText = [];
      }
    };
  }
});
