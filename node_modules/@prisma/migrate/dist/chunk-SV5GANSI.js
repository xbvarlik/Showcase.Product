"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_SV5GANSI_exports = {};
__export(chunk_SV5GANSI_exports, {
  MigrateStatus: () => MigrateStatus,
  init_MigrateStatus: () => init_MigrateStatus
});
module.exports = __toCommonJS(chunk_SV5GANSI_exports);
var import_chunk_MWEO3VUS = require("./chunk-MWEO3VUS.js");
var import_chunk_EYA6AFSF = require("./chunk-EYA6AFSF.js");
var import_chunk_Q7ACZDDT = require("./chunk-Q7ACZDDT.js");
var import_chunk_KEBB7UIB = require("./chunk-KEBB7UIB.js");
var import_chunk_6TE2RIPN = require("./chunk-6TE2RIPN.js");
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var debug, _MigrateStatus, MigrateStatus;
var init_MigrateStatus = (0, import_chunk_WWAWV7DQ.__esm)({
  "src/commands/MigrateStatus.ts"() {
    (0, import_chunk_6TE2RIPN.init_colors)();
    (0, import_chunk_MWEO3VUS.init_Migrate)();
    (0, import_chunk_KEBB7UIB.init_ensureDatabaseExists)();
    (0, import_chunk_EYA6AFSF.init_getSchemaPathAndPrint)();
    (0, import_chunk_Q7ACZDDT.init_printDatasource)();
    debug = (0, import_debug.default)("prisma:migrate:status");
    _MigrateStatus = class _MigrateStatus2 {
      static new() {
        return new _MigrateStatus2();
      }
      async parse(argv) {
        const args = (0, import_internals.arg)(
          argv,
          {
            "--help": Boolean,
            "-h": "--help",
            "--schema": String,
            "--telemetry-information": String
          },
          false
        );
        if ((0, import_internals.isError)(args)) {
          return this.help(args.message);
        }
        await (0, import_internals.checkUnsupportedDataProxy)("migrate status", args, true);
        if (args["--help"]) {
          return this.help();
        }
        await (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true });
        const { schemaPath } = await (0, import_chunk_EYA6AFSF.getSchemaPathAndPrint)(args["--schema"]);
        (0, import_chunk_Q7ACZDDT.printDatasource)({ datasourceInfo: await (0, import_chunk_KEBB7UIB.getDatasourceInfo)({ schemaPath }) });
        const migrate = new import_chunk_MWEO3VUS.Migrate(schemaPath);
        await (0, import_chunk_KEBB7UIB.ensureCanConnectToDatabase)(schemaPath);
        let diagnoseResult;
        let listMigrationDirectoriesResult;
        try {
          diagnoseResult = await migrate.diagnoseMigrationHistory({
            optInToShadowDatabase: false
          });
          debug({ diagnoseResult: JSON.stringify(diagnoseResult, null, 2) });
          listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
          debug({ listMigrationDirectoriesResult });
        } finally {
          migrate.stop();
        }
        process.stdout.write("\n");
        if (listMigrationDirectoriesResult.migrations.length > 0) {
          const migrations = listMigrationDirectoriesResult.migrations;
          process.stdout.write(
            `${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations
`
          );
        } else {
          process.stdout.write(`No migration found in prisma/migrations
`);
        }
        let unappliedMigrations = [];
        if (diagnoseResult.history?.diagnostic === "databaseIsBehind") {
          unappliedMigrations = diagnoseResult.history.unappliedMigrationNames;
          process.stdout.write(
            `Following migration${unappliedMigrations.length > 1 ? "s" : ""} have not yet been applied:
${unappliedMigrations.join("\n")}

To apply migrations in development run ${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate dev`)))}.
To apply migrations in production run ${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate deploy`)))}.
`
          );
          process.exit(1);
        } else if (diagnoseResult.history?.diagnostic === "historiesDiverge") {
          console.error(`Your local migration history and the migrations table from your database are different:

The last common migration is: ${diagnoseResult.history.lastCommonMigrationName}

The migration${diagnoseResult.history.unappliedMigrationNames.length > 1 ? "s" : ""} have not yet been applied:
${diagnoseResult.history.unappliedMigrationNames.join("\n")}

The migration${diagnoseResult.history.unpersistedMigrationNames.length > 1 ? "s" : ""} from the database are not found locally in prisma/migrations:
${diagnoseResult.history.unpersistedMigrationNames.join("\n")}`);
          process.exit(1);
        }
        if (!diagnoseResult.hasMigrationsTable) {
          if (listMigrationDirectoriesResult.migrations.length === 0) {
            console.error(`The current database is not managed by Prisma Migrate.
        
Read more about how to baseline an existing production database:
${(0, import_internals.link)("https://pris.ly/d/migrate-baseline")}`);
            process.exit(1);
          } else {
            const migrationId = listMigrationDirectoriesResult.migrations.shift();
            console.error(`The current database is not managed by Prisma Migrate.

If you want to keep the current database structure and data and create new migrations, baseline this database with the migration "${migrationId}":
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate resolve --applied "${migrationId}"`)))}

Read more about how to baseline an existing production database:
https://pris.ly/d/migrate-baseline`);
            process.exit(1);
          }
        } else if (diagnoseResult.failedMigrationNames.length > 0) {
          const failedMigrations = diagnoseResult.failedMigrationNames;
          console.error(
            `Following migration${failedMigrations.length > 1 ? "s" : ""} have failed:
${failedMigrations.join("\n")}

During development if the failed migration(s) have not been deployed to a production database you can then fix the migration(s) and run ${(0, import_chunk_6TE2RIPN.bold)(
              (0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate dev`))
            )}.
`
          );
          console.error(`The failed migration(s) can be marked as rolled back or applied:
      
- If you rolled back the migration(s) manually:
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate resolve --rolled-back "${failedMigrations[0]}"`)))}

- If you fixed the database manually (hotfix):
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate resolve --applied "${failedMigrations[0]}"`)))}

Read more about how to resolve migration issues in a production database:
${(0, import_internals.link)("https://pris.ly/d/migrate-resolve")}`);
          process.exit(1);
        } else {
          process.stdout.write("\n");
          if (unappliedMigrations.length === 0) {
            return `Database schema is up to date!`;
          }
        }
        return "";
      }
      help(error) {
        if (error) {
          return new import_internals.HelpError(`
${(0, import_chunk_6TE2RIPN.bold)((0, import_chunk_6TE2RIPN.red)(`!`))} ${error}
${_MigrateStatus2.help}`);
        }
        return _MigrateStatus2.help;
      }
    };
    _MigrateStatus.help = (0, import_internals.format)(`
Check the status of your database migrations

  ${(0, import_chunk_6TE2RIPN.bold)("Usage")}

    ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate status [options]
    
  ${(0, import_chunk_6TE2RIPN.bold)("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

  ${(0, import_chunk_6TE2RIPN.bold)("Examples")}

  Check the status of your database migrations
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate status

  Specify a schema
  ${(0, import_chunk_6TE2RIPN.dim)("$")} prisma migrate status --schema=./schema.prisma
`);
    MigrateStatus = _MigrateStatus;
  }
});
