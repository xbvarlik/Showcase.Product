"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_JNP5TBS7_exports = {};
__export(chunk_JNP5TBS7_exports, {
  ValidateError: () => ValidateError,
  validate: () => validate
});
module.exports = __toCommonJS(chunk_JNP5TBS7_exports);
var import_chunk_YRBRUREX = require("./chunk-YRBRUREX.js");
var import_chunk_IAEMHQAC = require("./chunk-IAEMHQAC.js");
var import_chunk_WMIBAVWZ = require("./chunk-WMIBAVWZ.js");
var import_chunk_V6E4PZFJ = require("./chunk-V6E4PZFJ.js");
var import_chunk_PFLLVWZX = require("./chunk-PFLLVWZX.js");
var import_chunk_H3T4L34H = require("./chunk-H3T4L34H.js");
var import_chunk_5JDKBNDH = require("./chunk-5JDKBNDH.js");
var import_chunk_A4QWQE3W = require("./chunk-A4QWQE3W.js");
var import_chunk_7MD6344A = require("./chunk-7MD6344A.js");
var import_chunk_PG5FDKSF = require("./chunk-PG5FDKSF.js");
var import_chunk_WWAWV7DQ = require("./chunk-WWAWV7DQ.js");
var import_debug = __toESM(require("@prisma/debug"));
var import_function = (0, import_chunk_WWAWV7DQ.__toESM)((0, import_chunk_PFLLVWZX.require_function)());
var debug = (0, import_debug.default)("prisma:validate");
var ValidateError = class extends Error {
  constructor(params) {
    const constructedErrorMessage = (0, import_chunk_H3T4L34H.$)(params).with({ _tag: "parsed" }, ({ errorCode, message, reason }) => {
      const errorCodeMessage = errorCode ? `Error code: ${errorCode}` : "";
      return `${reason}
${errorCodeMessage}
${(0, import_chunk_WMIBAVWZ.relativizePathInPSLError)(message)}`;
    }).with({ _tag: "unparsed" }, ({ message, reason }) => {
      const detailsHeader = (0, import_chunk_PG5FDKSF.red)((0, import_chunk_PG5FDKSF.bold)("Details:"));
      return `${reason}
${detailsHeader} ${message}`;
    }).exhaustive();
    const errorMessageWithContext = `${constructedErrorMessage}
[Context: validate]`;
    super((0, import_chunk_V6E4PZFJ.addVersionDetailsToErrorMessage)(errorMessageWithContext));
    this.name = "ValidateError";
  }
};
function validate(options) {
  const debugErrorType = (0, import_chunk_IAEMHQAC.createDebugErrorType)(debug, "validateWasm");
  debug(`Using validate Wasm`);
  const validateEither = (0, import_function.pipe)(
    (0, import_chunk_7MD6344A.tryCatch)(
      () => {
        if (process.env.FORCE_PANIC_QUERY_ENGINE_GET_DMMF) {
          debug("Triggering a Rust panic...");
          import_chunk_5JDKBNDH.prismaSchemaWasm.debug_panic();
        }
        const params = JSON.stringify({
          prismaSchema: options.schemas,
          noColor: Boolean(process.env.NO_COLOR)
        });
        import_chunk_5JDKBNDH.prismaSchemaWasm.validate(params);
      },
      (e) => ({
        type: "wasm-error",
        reason: "(validate wasm)",
        error: e
      })
    )
  );
  if ((0, import_chunk_7MD6344A.isRight)(validateEither)) {
    return;
  }
  const error = (0, import_chunk_H3T4L34H.$)(validateEither.left).with({ type: "wasm-error" }, (e) => {
    debugErrorType(e);
    console.error("");
    if ((0, import_chunk_A4QWQE3W.isWasmPanic)(e.error)) {
      const { message, stack } = (0, import_chunk_A4QWQE3W.getWasmError)(e.error);
      debug(`Error validating schema: ${message}`);
      debug(stack);
      const panic = new import_chunk_A4QWQE3W.RustPanic(
        /* message */
        message,
        /* rustStack */
        stack,
        /* request */
        "@prisma/prisma-schema-wasm validate",
        "FMT_CLI",
        /* schemaPath */
        (0, import_chunk_YRBRUREX.debugMultipleSchemaPaths)(options.schemas),
        /* schema */
        options.schemas
      );
      return panic;
    }
    const errorOutput = e.error.message;
    return new ValidateError((0, import_chunk_IAEMHQAC.parseQueryEngineError)({ errorOutput, reason: e.reason }));
  }).exhaustive();
  throw error;
}
